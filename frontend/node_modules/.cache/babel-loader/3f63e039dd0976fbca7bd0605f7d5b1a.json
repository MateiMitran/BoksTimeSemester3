{"ast":null,"code":"import axios from \"axios\";\nimport authHeader from \"./auth-header\";\nconst API_URL = \"http://localhost:8080/api/\";\nconst JWT_URL = \"http://localhost:8080/api/jwt/decode/\";\nconst params = new URLSearchParams();\nconst config = {\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n};\n\nclass AuthService {\n  login(username, password) {\n    console.log(username, password);\n    localStorage.setItem(\"username\", username);\n    params.append('username', username);\n    params.append('password', password);\n    return axios.post(API_URL + \"login\", params, config).then(result => {\n      if (result.data.access_token) {\n        console.log(result.data.access_token);\n        console.log(JSON.stringify(result.data));\n        localStorage.setItem(\"access_token\", result.data.access_token);\n        let token = this.getDecodedJWT(result.data.access_token);\n        console.log(token);\n        localStorage.setItem(\"expiresAt\", token.exp);\n        localStorage.setItem(\"currentUser\", \"yep\");\n      }\n\n      console.log(result.data);\n      return result.data;\n    });\n  }\n\n  logout() {\n    localStorage.clear();\n  }\n\n  register(username, email, password, roleName) {\n    console.log(username, email, password, roleName);\n    return axios.post(API_URL + \"register\", {\n      username,\n      email,\n      password,\n      roleName\n    });\n  }\n\n  getCurrentUser() {\n    return localStorage.getItem('currentUser');\n  }\n\n  getAccessToken() {\n    return localStorage.getItem('access_token');\n  }\n\n  getUsername() {\n    return localStorage.getItem('username');\n  }\n\n  getDecodedJWT(token) {\n    return axios.post(JWT_URL, token, {\n      headers: authHeader()\n    });\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["C:/Users/matei/Desktop/BoksTime1/sem3_individualtrackproject_4207734/frontend/src/services/auth.service.js"],"names":["axios","authHeader","API_URL","JWT_URL","params","URLSearchParams","config","headers","AuthService","login","username","password","console","log","localStorage","setItem","append","post","then","result","data","access_token","JSON","stringify","token","getDecodedJWT","exp","logout","clear","register","email","roleName","getCurrentUser","getItem","getAccessToken","getUsername"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,MAAMC,OAAO,GAAG,4BAAhB;AACA,MAAMC,OAAO,GAAG,uCAAhB;AAEA,MAAMC,MAAM,GAAG,IAAIC,eAAJ,EAAf;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AADI,CAAf;;AAMA,MAAMC,WAAN,CAAkB;AAEhBC,EAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAqBC,QAArB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCL,QAAhC;AACAN,IAAAA,MAAM,CAACY,MAAP,CAAc,UAAd,EAAyBN,QAAzB;AACAN,IAAAA,MAAM,CAACY,MAAP,CAAc,UAAd,EAAyBL,QAAzB;AACA,WAAOX,KAAK,CACTiB,IADI,CACCf,OAAO,GAAG,OADX,EACoBE,MADpB,EAC4BE,MAD5B,EAEJY,IAFI,CAEEC,MAAD,IAAY;AAChB,UAAIA,MAAM,CAACC,IAAP,CAAYC,YAAhB,EAA8B;AAC5BT,QAAAA,OAAO,CAACC,GAAR,CAAYM,MAAM,CAACC,IAAP,CAAYC,YAAxB;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAYS,IAAI,CAACC,SAAL,CAAeJ,MAAM,CAACC,IAAtB,CAAZ;AACAN,QAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCI,MAAM,CAACC,IAAP,CAAYC,YAAjD;AACA,YAAIG,KAAK,GAAG,KAAKC,aAAL,CAAmBN,MAAM,CAACC,IAAP,CAAYC,YAA/B,CAAZ;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACAV,QAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAiCS,KAAK,CAACE,GAAvC;AACAZ,QAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoC,KAApC;AACD;;AACDH,MAAAA,OAAO,CAACC,GAAR,CAAYM,MAAM,CAACC,IAAnB;AACA,aAAOD,MAAM,CAACC,IAAd;AACD,KAdI,CAAP;AAeD;;AAEDO,EAAAA,MAAM,GAAG;AACPb,IAAAA,YAAY,CAACc,KAAb;AACD;;AAEDC,EAAAA,QAAQ,CAACnB,QAAD,EAAWoB,KAAX,EAAkBnB,QAAlB,EAA4BoB,QAA5B,EAAsC;AAC5CnB,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAqBoB,KAArB,EAA2BnB,QAA3B,EAAoCoB,QAApC;AACA,WAAO/B,KAAK,CAACiB,IAAN,CAAWf,OAAO,GAAG,UAArB,EAAiC;AACtCQ,MAAAA,QADsC;AAEtCoB,MAAAA,KAFsC;AAGtCnB,MAAAA,QAHsC;AAItCoB,MAAAA;AAJsC,KAAjC,CAAP;AAMD;;AAEDC,EAAAA,cAAc,GAAG;AACf,WAAOlB,YAAY,CAACmB,OAAb,CAAqB,aAArB,CAAP;AACD;;AACDC,EAAAA,cAAc,GAAG;AACf,WAAOpB,YAAY,CAACmB,OAAb,CAAqB,cAArB,CAAP;AACD;;AACDE,EAAAA,WAAW,GAAG;AACZ,WAAOrB,YAAY,CAACmB,OAAb,CAAqB,UAArB,CAAP;AACD;;AAEDR,EAAAA,aAAa,CAACD,KAAD,EAAQ;AACnB,WAAOxB,KAAK,CAACiB,IAAN,CAAWd,OAAX,EAAoBqB,KAApB,EAA2B;AAACjB,MAAAA,OAAO,EAACN,UAAU;AAAnB,KAA3B,CAAP;AACD;;AAlDe;;AAsDlB,eAAe,IAAIO,WAAJ,EAAf","sourcesContent":["import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://localhost:8080/api/\";\r\nconst JWT_URL = \"http://localhost:8080/api/jwt/decode/\";\r\n\r\nconst params = new URLSearchParams();\r\n\r\nconst config = {\r\n  headers: {\r\n    'Content-Type': 'application/x-www-form-urlencoded'\r\n  }\r\n}\r\n\r\nclass AuthService {\r\n\r\n  login(username, password) {\r\n    console.log(username,password);\r\n    localStorage.setItem(\"username\",username);\r\n    params.append('username',username);\r\n    params.append('password',password);\r\n    return axios\r\n      .post(API_URL + \"login\", params, config)\r\n      .then((result) => {\r\n        if (result.data.access_token) {\r\n          console.log(result.data.access_token);\r\n          console.log(JSON.stringify(result.data));\r\n          localStorage.setItem(\"access_token\", result.data.access_token);\r\n          let token = this.getDecodedJWT(result.data.access_token);\r\n          console.log(token);\r\n          localStorage.setItem(\"expiresAt\",token.exp);\r\n          localStorage.setItem(\"currentUser\", \"yep\");\r\n        }\r\n        console.log(result.data);\r\n        return result.data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.clear();\r\n  }\r\n\r\n  register(username, email, password, roleName) {\r\n    console.log(username,email,password,roleName);\r\n    return axios.post(API_URL + \"register\", {\r\n      username,\r\n      email,\r\n      password,\r\n      roleName\r\n    });\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return localStorage.getItem('currentUser');\r\n  }\r\n  getAccessToken() {\r\n    return localStorage.getItem('access_token');\r\n  }\r\n  getUsername() {\r\n    return localStorage.getItem('username');\r\n  }\r\n\r\n  getDecodedJWT(token) {\r\n    return axios.post(JWT_URL, token, {headers:authHeader()});\r\n  }\r\n  \r\n}\r\n\r\nexport default new AuthService();"]},"metadata":{},"sourceType":"module"}